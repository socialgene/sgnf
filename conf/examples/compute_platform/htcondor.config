/*
    Use as follows:

        outdir='/home/chase/Documents/socialgene_data/htcondor_example'
        outdir_download_cache='/home/chase/Documents/socialgene_data/cache'

    # Run in two steps, the first creates all the files needed for running on HTCONDOR
        nextflow run . \
            -profile htcondor,docker \
            --outdir $outdir \
            --outdir_download_cache $outdir \
            --htcondor \
            -resume

    # The second parses the HTCONDOR results and then all other computation (e.g. BLASTp, MMseqs2)
        nextflow run . \
            -profile ultraquickstart,docker \
            --outdir $outdir \
            --outdir_download_cache $outdir \
            --domtblout_path '/home/chase/Downloads/chtc_results/*.domtblout.gz' \
            -resume


----------------------------------------------------------------------------------------
*/

params {
        config_profile_name         = 'Ultra-Quickstart run'
        config_profile_description  = 'Minimal test dataset to demo pipeline function'
        ncbi_datasets_command       = 'genome accession "GCA_004187715.1,GCA_003408515.1"'
        mibig                       = false
        build_database              = true
        paired_omics                = false
        hmmlist                     = ["antismash"]
    /*
    ////////////////////////
    set which modules to run
    ////////////////////////
    */
        mmseqs_steps    = '90'
        blastp          = true // only set to true for small datasets or if you know what you're doing
        ncbi_taxonomy   = true
    /*
    ////////////////////////
    adjust per your computer
    ////////////////////////
    */
        fasta_splits                = 24
        max_cpus                    = 24
        max_memory                  = 40
        max_time                    = 6000.h

}

process {
    withName:HMMER_HMMSEARCH {
        cpus   = { check_max( 1    * task.attempt, 'cpus'    ) }
        memory = { check_max( 2    * task.attempt, 'memory'  ) }
        time   = { check_max( 60.h * task.attempt, 'time'   ) }
    }
}
