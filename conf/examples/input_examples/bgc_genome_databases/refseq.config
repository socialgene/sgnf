/*
    Use as follows:

        outdir='/media/socialgene_nvme/v0_3_8/refseq'
        outdir_download_cache='/media/socialgene_nvme/v0_3_8/cache'
        workdir='/media/socialgene_nvme/work'
        
    # Run in two steps, the first creates all the files needed for running on HTCONDOR
        nextflow run . \
            -profile refseq,docker,slurm \
            --outdir $outdir \
            --outdir_download_cache $outdir_download_cache \
            --genbank_input_buffer 8000 \
            --include_sequences \
            --htcondor \
            --fasta_splits 3000 \
            -w $workdir \
            -resume

    # The second parses the HTCONDOR results and then all other computation (e.g. BLASTp, MMseqs2)
        domtblout_path='/tmp/temp/*.domtblout.gz'

        nextflow run . \
            -profile refseq,docker,slurm \
            --outdir $outdir \
            --domtblout_path $domtblout_path \
            --outdir_download_cache $outdir_download_cache \
            -resume

----------------------------------------------------------------------------------------
*/

params {

    local_genbank='/media/bigdrive2/chase/ncbi/genomes/**/*.gbff.gz'

    config_profile_name         = 'RefSeq'
    config_profile_description  = 'All RefSeq genomes'
    /*
    ////////////////////////
    set which modules to run
    ////////////////////////
    */
        mibig           = true
        hmmlist         = 'antismash,amrfinder,pfam,resfams,tigrfam'
        mmseqs_steps    = '90,70,50,30'
        ncbi_taxonomy   = true
        build_database  = true
        goterms         = true

    /*
    ////////////////////////
    adjust per your computer
    ////////////////////////
    */
        max_cpus                    = 96
        max_memory                  = '920.GB'
        max_time                    = 200.h
        slurm_queue_size            = 40
}

process {

    withName:PROCESS_GENBANK_FILES {
        cpus   = { check_max (1     * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB * task.attempt, 'memory' ) }
        time   = { check_max (24.h  * task.attempt, 'time'   ) }
    }
    withLabel:process_single {
        cpus   = { check_max( 1                    , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 10.h  * task.attempt  , 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 40.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 20     * task.attempt, 'cpus'    ) }
        memory = { check_max( 40.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 80.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 40    * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 72.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 400.GB * task.attempt, 'memory' ) }
    }

    withName:ANTISMASH {
        cpus   = 2
        memory = { check_max (5.GB * task.attempt, 'memory' ) }
        time   = { check_max (24.h  * task.attempt, 'time'   ) }
                ext.args = "--genefinding-tool none --skip-zip-file --allow-long-headers --skip-sanitisation --minimal --enable-genefunctions --enable-lanthipeptides --enable-lassopeptides --enable-nrps-pks --enable-sactipeptides --enable-t2pks --enable-thiopeptides --enable-tta"

    }
}
