/*
========================================================================================
    Nextflow config file for running minimal tests
========================================================================================
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:

        outdir='/media/socialgene_nvme/v0.4.1/streptomyces'
        outdir_download_cache='/media/socialgene_nvme/v0.4.1/cache'

    # The second parses the HTCONDOR results and then all other computation (e.g. BLASTp, MMseqs2)
        nextflow run . \
            -profile streptomyces,docker,slurm \
            --ncbi_datasets_command 'genome taxon "Streptomyces" --assembly-source refseq --exclude-atypical' \
            --outdir $outdir \
            --outdir_download_cache $outdir_download_cache \
            --fasta_splits 100 \
            --include_sequences \
            -resume

*/

params {

    /*
    ////////////////////////
    set which modules to run
    ////////////////////////
    */
        mibig           = true
        hmmlist         = 'antismash,amrfinder,pfam,resfams,tigrfam'
        mmseqs_steps    = '90,80,70,50,30'
        ncbi_taxonomy   = true
        build_database  = true
        antismash       = true

    /*

    ////////////////////////
    Adjust per your computer
    ////////////////////////
    */
        // If running the pipeline on a single computer, fasta_splits should be set at the same
        // number as max_cpus. For very large input data you might
        // want to set fasta_splits to a higher number to allow checkpointing. Howevever, setting
        // fasta_splits too high will result in diminishing returns due to overhead and possibly
        // too-few proteins per file (would probably keep <1000 for any size of dataset)
        max_cpus                    = 96
        max_memory                  = '800.GB'
        max_time                    = 48.h
        slurm_queue_size            = 48
}

process {

    withName:HMMER_HMMSEARCH {
        cpus   = { check_max (2     * task.attempt, 'cpus'   ) }
        memory = { check_max (5.GB * task.attempt, 'memory' ) }
        time   = { check_max (24.h  * task.attempt, 'time'   ) }
    }
    
    withLabel:process_single {
        cpus   = { check_max( 1                    , 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 10.h  * task.attempt  , 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 2.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 40.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 5     * task.attempt, 'cpus'    ) }
        memory = { check_max( 20.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 80.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 24    * task.attempt, 'cpus'    ) }
        memory = { check_max( 100.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 24.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 2000.GB * task.attempt, 'memory' ) }
    }   
    withName:ANTISMASH {
        cpus   = 2
        memory = { check_max (3.GB * task.attempt, 'memory' ) }
        time   = { check_max (24.h  * task.attempt, 'time'   ) }
                ext.args = "--no-abort-on-invalid-records --genefinding-tool none --skip-zip-file --allow-long-headers --skip-sanitisation"
    }
    withName:'MMSEQS2_CLUSTER'{
        // https://github.com/soedinglab/mmseqs2/wiki#how-to-set-the-right-alignment-coverage-to-cluster
        ext.args = '-c 0.7 --cov-mode 0 --split 1'
    }
}
