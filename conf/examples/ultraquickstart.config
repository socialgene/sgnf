/*
----------------------------------------------------------------------------------------
Use as follows:

    outdir='/tmp/socialgene_data/ultraquickstart'
    outdir_download_cache='/tmp/socialgene_data/cache'

    nextflow run . \
        -profile ultraquickstart,docker \
        --outdir $outdir \
        --outdir_download_cache $outdir_download_cache \
        -resume
----------------------------------------------------------------------------------------
*/

params {
        config_profile_name         = 'Ultra-Quickstart run'
        config_profile_description  = 'Minimal test dataset to demo pipeline function'
        ncbi_genome_download_command = '-s refseq --assembly-accessions GCF_000525635.1,GCF_000204155.1 bacteria --no-cache'
    /*
    ///////////////////////////////////
    Set which additional modules to run
    ///////////////////////////////////
    */
        mibig           = false
        mmseqs_steps    = '90'
        blastp          = false // only set to true for small datasets or if you know what you're doing or if you know what you're doing
        hmmlist         = 'resfams,antismash'
        ncbi_taxonomy   = true
        antismash       = false
        build_database  = true

    /*
    ////////////////////////
    Adjust per your computer
    ////////////////////////
    */
        // If running the pipeline on a single computer, fasta_splits should be set at the same
        // number as max_cpus. For very large input data you might
        // want to set fasta_splits to a higher number to allow checkpointing. Howevever, setting
        // fasta_splits too high will result in diminishing returns due to overhead and possibly
        // too-few proteins per file (would probably keep <1000 for any size of dataset)
        fasta_splits                = 23
        max_cpus                    = 23
        max_memory                  = '8.GB'
        max_time                    = 3.h

}

process {
    // You can modify some processes (Like DIAMOND) by chaging arguments as below...
    withName:'DIAMOND_BLASTP'{
        ext.args = "-k0 --max-hsps 1 --query-cover 70 --subject-cover 70 --id 95 --block-size 6 --ultra-sensitive"
    }
      withName: 'SOCIALGENE_SGNF:SOCIALGENE:CUSTOM_DUMPSOFTWAREVERSIONS' {
    cpus = 1
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:DEDUPLICATE_AND_INDEX_FASTA' {
    cpus = 3
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:DOWNLOAD_GOTERMS' {
    cpus = 1
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:GENOME_HANDLING:DEDUPLICATE_GENOMIC_INFO' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:GENOME_HANDLING:DEDUPLICATE_PROTEIN_INFO' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:GENOME_HANDLING:MIBIG_DOWNLOAD' {
    cpus = 1
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:GENOME_HANDLING:PROCESS_GENBANK_FILES' {
    cpus = 7
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:HMMSEARCH_PARSE' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:HMM_PREP:GATHER_HMMS:DOWNLOAD_HMM_DATABASE' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:HMM_PREP:HMM_HASH' {
    cpus = 3
    memory = 3.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:MMSEQS2_CLUSTER' {
    cpus = 23
    memory = 2.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:MMSEQS2_CREATEDB' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:MULTIQC' {
    cpus = 3
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:NCBI_TAXONOMY:TAXDUMP_DOWNLOAD' {
    cpus = 1
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:NCBI_TAXONOMY:TAXDUMP_PROCESS' {
    cpus = 2
    memory = 2.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:NEO4J_ADMIN_IMPORT_DRYRUN' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:NEO4J_HEADERS' {
    cpus = 2
    memory = 1.GB
  }
  withName: 'SOCIALGENE_SGNF:SOCIALGENE:PARAMETER_EXPORT_FOR_NEO4J' {
    cpus = 2
    memory = 1.GB
  }
}
