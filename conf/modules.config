/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.tracedir}" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

    withName: CRABHASH {
        ext.args   = "${params.refseq_nr_protein_fasta_glob}"
    }


    withName:'HMMER_HMMSEARCH'{
       ext.args = ""
    }

    withName:'DIAMOND_BLASTP'{
       ext.args = '-k0 --max-hsps 1 --compress 1'
    }

    withName:'MMSEQS2_EASYCLUSTER'{
       // https://github.com/soedinglab/mmseqs2/wiki#how-to-set-the-right-alignment-coverage-to-cluster
       storeDir = {"${params.outdir_mmseqs2_cache}"}
       ext.args = '--cov-mode 0 -c 0.8'
    }

    withName: 'NCBI_DATASETS_DOWNLOAD' {
       ext.args = '--include-gbff --exclude-genomic-cds --exclude-protein --exclude-rna --exclude-seq'
    }


    /*
    ========================================================================================
    NEO4J IMPORT FILES
    ========================================================================================
    */

    withName: 'PAIRED_OMICS|NEO4J_HEADERS|REFSEQ_ASSEMBLY_TO_TAXID|TAXDUMP_PROCESS|ALL_VS_ALL_BLASTP|ASSEMBLY_ACCESSION|ASSEMBLY_TO_LOCUS|ASSEMBLY_TO_TAXID|LOCUS|HMM_TSV_PARSE' {
        publishDir = [
            // Save output files to a folder named after the Nextflow process
            path: { "${params.outdir_neo4j}/import/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: 'copy',
        ]
    }

    withName: 'DIAMOND_BLASTP|MMSEQS2_EASYCLUSTER' {
        publishDir = [
            // Save output files to a folder named after the Nextflow process
            path: { "${params.outdir_neo4j}/import/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: 'copy',
        ]
    }

    withName: 'PROCESS_GENBANK_FILES' {
        publishDir = [
            // Save output files to a folder named after the Nextflow process
            path: { "${params.outdir_neo4j}/import/mainfilesthing" },
            mode: 'copy',
        ]
    }

    withName: 'HMM_HASH' {
        publishDir = [
            // Save output files to a folder named after the Nextflow process
            path: { "${params.outdir_per_run}/hmm_cache" },
            mode: 'copy',
        ]
    }

    withName:'HMMSEARCH_PARSE'{
        publishDir = [
            path: { "${params.outdir_neo4j}/import/parsed_domtblout" },
            mode: 'copy',
        ]
    }

    withName:'TIGRFAM_INFO_DOWNLOAD|TIGRFAM_ROLES|TIGRFAM_TO_GO|TIGRFAM_TO_ROLE'{
        publishDir = [
            path: { "${params.outdir_neo4j}/import/tigrfam_info" },
            mode: 'copy',
        ]
    }
    withName:'PARAMETER_EXPORT_FOR_NEO4J'{
        ext.args = "${params.ncbi_genome_download_command}"
        publishDir = [
            path: { "${params.outdir_neo4j}/import/parameters" },
            mode: 'copy',
        ]
    }

    /*
    ========================================================================================
    CACHE FILES
    ========================================================================================
    */


   // BLAST outputs
    withName: 'DIAMOND_MAKEDB' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.outdir_blast_cache}"}
    }

    // HMM outputs
    withName: 'DOWNLOAD_AMRFINDER|DOWNLOAD_ANTISMASH|DOWNLOAD_BIGSLICE|DOWNLOAD_PFAM|DOWNLOAD_PRISM|DOWNLOAD_RESFAMS|DOWNLOAD_TIGRFAM|DOWNLOAD_CLASSIPHAGE|DOWNLOAD_VIRUS_ORTHOLOGOUS_GROUPS' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.outdir_download_cache}/${task.process.tokenize(':')[-1].toLowerCase()}"}
    }

    // NCBI assembly feature tables
    withName: 'FEATURE_TABLE_DOWNLOAD' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.outdir_download_cache}/${task.process.tokenize(':')[-1].toLowerCase()}"}
    }

    // MISC Downloads
    withName: 'TIGRFAM_INFO_DOWNLOAD|TAXDUMP_DOWNLOAD' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.outdir_download_cache}/${task.process.tokenize(':')[-1].toLowerCase()}"}
    }

    withName: 'NCBI_GENOME_DOWNLOAD' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.genome_downloads}"}
        ext.args   = "${params.ncbi_genome_download_command}"
    }

    withName: 'NCBI_GENOME_DOWNLOAD|NCBI_DATASETS_DOWNLOAD|' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.genome_downloads}/${task.process.tokenize(':')[-1].toLowerCase()}"}
    }


    withName: 'NCBI_GENOME_DOWNLOAD|NCBI_DATASETS_DOWNLOAD' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.genome_downloads}/${task.process.tokenize(':')[-1].toLowerCase()}"}
    }

    withName: 'DOWNLOAD_REFSEQ_NONREDUNDANT_COMPLETE' {
        // Save output files to a folder named after the Nextflow process
        storeDir = {"${params.refseq_nr_protein_fasta_dir}"}
    }


    withName: 'DOWNLOAD_REFSEQ_NONREDUNDANT_COMPLETE|CRABHASH' {
        storeDir = {"${params.refseq_nr_protein_fasta_dir}/${task.process.tokenize(':')[-1].toLowerCase()}"}
}
}
