/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName:'DIAMOND_BLASTP'{
        publishDir = [
            path: { "${params.outdir_neo4j}/import/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'DIAMOND_MAKEDB' {
        storeDir = {"${params.outdir_blast_cache}"}
    }


    withName:'MMSEQS2_CLUSTER'{
        publishDir = [
            [
            path: { "${params.outdir_neo4j}/import/${task.process.tokenize(':')[-1].toLowerCase()}" },
                mode: params.publish_dir_mode,
                pattern: '*mmseqs2_results_cluster.tsv.gz'
            ],
            [
            path: { "${params.outdir_per_run}/mmseqs_databases" },
                mode: params.publish_dir_mode,
                pattern: 'mmseqs_*'
            ],

        ]
    }

    withName:'MMSEQS2_CREATEDB'{
              publishDir = [
            path: {"${params.outdir_per_run}/mmseqs_databases"},
            mode: params.publish_dir_mode,
        ]
    }


    withName: 'NEO4J_HEADERS|TAXDUMP_PROCESS|HMM_TSV_PARSE' {
        publishDir = [
                path: { "${params.outdir_neo4j}/import/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'DEDUPLICATE_GENOMIC_INFO' {
        publishDir = [
            [
                path: { "${params.outdir_neo4j}/import/genomic_info" },
                mode: params.publish_dir_mode,
                pattern: '*locus_to_protein.gz'
            ],
            [
                path: { "${params.outdir_neo4j}/import/genomic_info" },
                mode: params.publish_dir_mode,
                pattern: '*assembly_to_locus.gz'
            ],
            [
                path: { "${params.outdir_neo4j}/import/genomic_info" },
                mode: params.publish_dir_mode,
                pattern: '*assembly_to_taxid.gz'
            ],
            [
                path: { "${params.outdir_neo4j}/import/genomic_info" },
                mode: params.publish_dir_mode,
                pattern: '*loci.gz'
            ],
            [
                path: { "${params.outdir_neo4j}/import/genomic_info" },
                mode: params.publish_dir_mode,
                pattern: '*assemblies.gz'
            ]
        ]
    }

    withName: 'DEDUPLICATE_PROTEIN_INFO' {
        publishDir = [
            [
                path: { "${params.outdir_neo4j}/import/protein_info" },
                mode: params.publish_dir_mode,
                pattern: '*protein_info.gz'
            ],
            [
                path: { "${params.outdir_neo4j}/import/protein_info" },
                mode: params.publish_dir_mode,
                pattern: '*protein_ids.gz'
            ],
            [
                path: { "${params.outdir_neo4j}/import/protein_info" },
                mode: params.publish_dir_mode,
                pattern: '*protein_to_go.gz'
            ]

        ]
    }

    withName: 'NEO4J_HEADERS|TAXDUMP_PROCESS|HMM_TSV_PARSE' {
        publishDir = [
            path: { "${params.outdir_neo4j}/import/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'HMM_HASH' {
        publishDir =
        [
            [
                path: { "${params.outdir_neo4j}/import/hmm_info" },
                mode: params.publish_dir_mode,
                pattern: '*hmminfo'
            ],
            [
                path: { "${params.outdir_neo4j}/import/hmm_info" },
                mode: params.publish_dir_mode,
                pattern: '*sg_hmm_nodes'
            ],
            [
                path: { "${params.outdir_per_run}/hmm_cache" },
                mode: params.publish_dir_mode,
                pattern: 'socialgene_nr_hmms_file_*'
            ]
        ]

    }

    withName:'TIGRFAM_ROLES|TIGRFAM_TO_GO|TIGRFAM_TO_ROLE'{
        publishDir = [
            path: { "${params.outdir_neo4j}/import/tigrfam_info" },
            mode: params.publish_dir_mode,
        ]
    }
    withName:'PARAMETER_EXPORT_FOR_NEO4J'{
        publishDir = [
            path: { "${params.outdir_neo4j}/import/parameters" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'DOWNLOAD_CHEMBL_DATA' {
        publishDir = [
            path: {"${params.outdir_neo4j}/import/chembl"},
            mode: params.publish_dir_mode,
            overwrite: false
        ]
    }
    /*
    ========================================================================================
    CACHE FILES
    ========================================================================================
    */


    withName: 'DOWNLOAD_GOTERMS' {
        publishDir = [
            path: { "${params.outdir_neo4j}/import/goterms" },
            mode: params.publish_dir_mode,
        ]
    }

    // HMM outputs
    withName: 'DOWNLOAD_HMM_DATABASE' {
        storeDir = {"${params.outdir_download_cache}/${database.toLowerCase()}"}
    }

    // MISC Downloads
    withName: 'TAXDUMP_DOWNLOAD' {
        storeDir = {"${params.outdir_download_cache}/${task.process.tokenize(':')[-1].toLowerCase()}"}
    }

    withName: 'MIBIG_DOWNLOAD|DOWNLOAD_CHEMBL_DATA' {
        storeDir = {"${params.outdir_download_cache}/${task.process.tokenize(':')[-1].toLowerCase()}"}

    }
    withName: 'NCBI_GENOME_DOWNLOAD|NCBI_DATASETS_DOWNLOAD' {
        storeDir = {"${params.outdir_genomes}/${task.process.tokenize(':')[-1].toLowerCase()}"}

    }

    withName: 'HTCONDOR_PREP' {
        storeDir = {"${params.htcondor_prep_directory}"}
    }

    withName: 'DEDUPLICATE_AND_INDEX_FASTA' {
        publishDir = [
            path: { "${params.outdir_per_run}/nonredundant_fasta" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'NEO4J_ADMIN_IMPORT' {
        publishDir = [
            path: {"${params.outdir_neo4j}"},
            mode: params.publish_dir_mode,
        ]
    }

    withName: 'NEO4J_ADMIN_IMPORT_DRYRUN' {
        publishDir = [
            path: {"${params.outdir_neo4j}"},
            mode: params.publish_dir_mode,
        ]
    }

    withName:'ANTISMASH'{
        publishDir = [
            [
            path:{"${params.outdir_per_run}/antismash_results/regions"},
            mode: 'move',
            pattern: "*.regions.gbk.gz"
            ],
            [
            path:{"${params.outdir_per_run}/antismash_results/full_json"},
            mode: 'move',
            pattern: "*.json.gz"
            ]
        ]
    }
    withName:'MERGE_PARSED_DOMTBLOUT'{
        publishDir = [
            path: { "${params.outdir_neo4j}/import/parsed_domtblout" },
            mode: params.publish_dir_mode,
        ]
    }




}
